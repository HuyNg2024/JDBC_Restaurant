package GUI;

import BLL.TabletopBLL;
import DTO.TabletopDTO;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;

public class TabletopGUI extends JFrame {
    private JTable table;
    private DefaultTableModel model;
    private JTextField txtTableCode, txtStatus, txtCapacity, txtCurrent, txtCustomerID;
    private TabletopBLL tabletopBLL = new TabletopBLL();

    public TabletopGUI() {
        setTitle("Ô∏è Qu·∫£n l√Ω b√†n (TableTop)");
        setSize(950, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        setUIFont(new Font("Segoe UI", Font.PLAIN, 14));
        JLabel lblTitle = new JLabel(" Qu·∫£n l√Ω b√†n", SwingConstants.CENTER);
        lblTitle.setFont(new Font("Segoe UI", Font.BOLD, 24));
        lblTitle.setBorder(new EmptyBorder(10, 0, 10, 0));
        add(lblTitle, BorderLayout.NORTH);

        model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[]{"ID", "M√£ Code", "Tr·∫°ng th√°i", "S·ª©c ch·ª©a", "Hi·ªán t·∫°i", "M√£ KH"});
        table = new JTable(model);
        table.setRowHeight(26);
        JScrollPane scrollPane = new JScrollPane(table);
        add(scrollPane, BorderLayout.CENTER);

        // Form nh·∫≠p d·ªØ li·ªáu
        JPanel formPanel = new JPanel(new GridLayout(2, 6, 10, 10));
        txtTableCode = new JTextField();
        txtStatus = new JTextField();
        txtCapacity = new JTextField();
        txtCurrent = new JTextField();
        txtCustomerID = new JTextField();

        formPanel.setBorder(new EmptyBorder(10, 20, 10, 20));
        formPanel.add(new JLabel("M√£ Code:"));
        formPanel.add(new JLabel("Tr·∫°ng th√°i:"));
        formPanel.add(new JLabel("S·ª©c ch·ª©a:"));
        formPanel.add(new JLabel("Hi·ªán t·∫°i:"));
        formPanel.add(new JLabel("M√£ KH:"));
        formPanel.add(new JLabel("")); // empty

        formPanel.add(txtTableCode);
        formPanel.add(txtStatus);
        formPanel.add(txtCapacity);
        formPanel.add(txtCurrent);
        formPanel.add(txtCustomerID);

        // N√∫t ch·ª©c nƒÉng
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 5));
        JButton btnAdd = new JButton(" Th√™m");
        JButton btnUpdate = new JButton("Ô∏è S·ª≠a");
        JButton btnDelete = new JButton("Ô∏è Xo√°");
        JButton btnReload = new JButton(" T·∫£i l·∫°i");
        JButton btnBack = new JButton(" Tr·ªü v·ªÅ");

        styleButton(btnAdd);
        styleButton(btnUpdate);
        styleButton(btnDelete);
        styleButton(btnReload);
        styleButton(btnBack);

        buttonPanel.add(btnAdd);
        buttonPanel.add(btnUpdate);
        buttonPanel.add(btnDelete);
        buttonPanel.add(btnReload);
        buttonPanel.add(btnBack);

        // Add t·∫•t c·∫£ xu·ªëng SOUTH
        JPanel southPanel = new JPanel(new BorderLayout());
        southPanel.add(formPanel, BorderLayout.NORTH);
        southPanel.add(buttonPanel, BorderLayout.SOUTH);
        add(southPanel, BorderLayout.SOUTH);

        // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
        loadData();

        // S·ª± ki·ªán ch·ªçn d√≤ng ‚Üí ƒë·ªï l√™n form
        table.getSelectionModel().addListSelectionListener(e -> {
            int row = table.getSelectedRow();
            if (row >= 0) {
                txtTableCode.setText(model.getValueAt(row, 1).toString());
                txtStatus.setText(model.getValueAt(row, 2).toString());
                txtCapacity.setText(model.getValueAt(row, 3).toString());
                txtCurrent.setText(model.getValueAt(row, 4).toString());
                txtCustomerID.setText(model.getValueAt(row, 5).toString().equals("‚Äî") ? "" : model.getValueAt(row, 5).toString());
            }
        });

        // X·ª≠ l√Ω n√∫t
        btnAdd.addActionListener(e -> addTable());
        btnUpdate.addActionListener(e -> updateTable());
        btnDelete.addActionListener(e -> deleteTable());
        btnReload.addActionListener(e -> loadData());
        btnBack.addActionListener(e -> {
            JOptionPane.showMessageDialog(this, " Tr·ªü v·ªÅ menu ch√≠nh (gi·∫£ l·∫≠p)");
            this.dispose();
        });
    }

    private void addTable() {
        try {
            TabletopDTO table = getFormData(false);
            boolean ok = tabletopBLL.addTable(table);
            if (ok) {
                JOptionPane.showMessageDialog(this, " Th√™m b√†n th√†nh c√¥ng!");
                loadData();
                clearForm();
            } else {
                JOptionPane.showMessageDialog(this, " Th√™m b√†n th·∫•t b·∫°i!");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "L·ªói nh·∫≠p li·ªáu: " + ex.getMessage());
        }
    }

    private void updateTable() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "üîé Vui l√≤ng ch·ªçn m·ªôt d√≤ng ƒë·ªÉ s·ª≠a!");
            return;
        }
        try {
            int tableID = Integer.parseInt(model.getValueAt(row, 0).toString());
            TabletopDTO table = getFormData(true);
            table.setTableID(tableID);

            boolean ok = tabletopBLL.updateTable(table);
            if (ok) {
                JOptionPane.showMessageDialog(this, " C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                loadData();
                clearForm();
            } else {
                JOptionPane.showMessageDialog(this, " C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "L·ªói: " + ex.getMessage());
        }
    }

    private void deleteTable() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, " H√£y ch·ªçn m·ªôt b√†n ƒë·ªÉ xo√°!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "B·∫°n c√≥ ch·∫Øc mu·ªën xo√° b√†n n√†y?", "X√°c nh·∫≠n", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            int id = Integer.parseInt(model.getValueAt(row, 0).toString());
            boolean ok = tabletopBLL.deleteTable(id);
            if (ok) {
                JOptionPane.showMessageDialog(this, "Ô∏è Xo√° th√†nh c√¥ng!");
                loadData();
                clearForm();
            } else {
                JOptionPane.showMessageDialog(this, " Xo√° th·∫•t b·∫°i!");
            }
        }
    }

    private TabletopDTO getFormData(boolean forUpdate) {
        String code = txtTableCode.getText().trim();
        String status = txtStatus.getText().trim();
        int capacity = Integer.parseInt(txtCapacity.getText().trim());
        int current = Integer.parseInt(txtCurrent.getText().trim());
        Integer customerID = txtCustomerID.getText().trim().isEmpty() ? null : Integer.parseInt(txtCustomerID.getText().trim());

        return new TabletopDTO(0, customerID, code, status, capacity, current);
    }

    private void clearForm() {
        txtTableCode.setText("");
        txtStatus.setText("");
        txtCapacity.setText("");
        txtCurrent.setText("");
        txtCustomerID.setText("");
    }

    private void loadData() {
        model.setRowCount(0);
        ArrayList<TabletopDTO> list = tabletopBLL.getAllTables();
        for (TabletopDTO t : list) {
            model.addRow(new Object[]{
                    t.getTableID(),
                    t.getTableCode(),
                    t.getStatus(),
                    t.getCapacity(),
                    t.getCurrent(),
                    t.getCustomerID() != null ? t.getCustomerID() : "‚Äî"
            });
        }
    }

    private void styleButton(JButton button) {
        button.setFont(new Font("Segoe UI", Font.BOLD, 13));
        button.setBackground(new Color(52, 152, 219));
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setPreferredSize(new Dimension(110, 32));
        button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }

    public static void setUIFont(Font font) {
        UIManager.put("Label.font", font);
        UIManager.put("Button.font", font);
        UIManager.put("Table.font", font);
        UIManager.put("TableHeader.font", font.deriveFont(Font.BOLD, 14));
        UIManager.put("TextField.font", font);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new TabletopGUI().setVisible(true));
    }
}
